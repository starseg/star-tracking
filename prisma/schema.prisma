generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  userId    Int      @id @default(autoincrement())
  name      String
  username  String   @unique
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  status    Status   @default(ACTIVE)
  type      UserType @default(USER)

  ComunicationDescription ComunicationDescription[]
}

model DeviceStatus {
  deviceStatusId Int    @id @default(autoincrement())
  description    String

  ibutton IButton[]
  tracker Tracker[]
}

model IButton {
  ibuttonId       Int     @id @default(autoincrement())
  number          String
  code            String
  programmedField String
  comments        String? @db.VarChar(2000)
  url1            String?
  url2            String?

  deviceStatus   DeviceStatus @relation(fields: [deviceStatusId], references: [deviceStatusId])
  deviceStatusId Int          @default(1)

  driverIButton DriverIButton[]
}

model Tracker {
  trackerId    Int     @id @default(autoincrement())
  number       String
  model        String
  chipOperator String
  iccid        String
  output       String
  comments     String? @db.VarChar(2000)

  deviceStatus   DeviceStatus @relation(fields: [deviceStatusId], references: [deviceStatusId])
  deviceStatusId Int          @default(1)

  vehicleTracker VehicleTracker[]
}

model Fleet {
  fleetId  Int     @id @default(autoincrement())
  name     String
  color    String
  status   Status  @default(ACTIVE)
  comments String? @db.VarChar(1000)

  driver       Driver[]
  vehicle      Vehicle[]
  fleetContact FleetContact[]
  fleetEmail   FleetEmail[]
  fleetLogin   FleetLogin[]
}

model FleetContact {
  fleetContactId Int    @id @default(autoincrement())
  name           String
  telephone      String

  fleet   Fleet @relation(fields: [fleetId], references: [fleetId], onDelete: Cascade)
  fleetId Int
}

model FleetEmail {
  fleetEmailId Int    @id @default(autoincrement())
  email        String

  fleet   Fleet @relation(fields: [fleetId], references: [fleetId], onDelete: Cascade)
  fleetId Int
}

model FleetLogin {
  fleetLoginId Int    @id @default(autoincrement())
  login        String
  password     String
  accessTo     String

  fleet   Fleet @relation(fields: [fleetId], references: [fleetId], onDelete: Cascade)
  fleetId Int
}

model Driver {
  driverId Int     @id @default(autoincrement())
  name     String
  cpf      String
  cnh      String
  comments String? @db.VarChar(2000)
  status   Status  @default(ACTIVE)
  imageUrl String? @db.VarChar(255)

  fleet   Fleet @relation(fields: [fleetId], references: [fleetId])
  fleetId Int

  driverIButton DriverIButton[]
}

model Vehicle {
  vehicleId        Int      @id @default(autoincrement())
  model            String
  licensePlate     String
  code             String
  renavam          String
  chassis          String
  year             String
  installationDate DateTime
  comments         String?  @db.VarChar(2000)
  url              String?
  status           Status   @default(ACTIVE)

  fleet   Fleet @relation(fields: [fleetId], references: [fleetId])
  fleetId Int

  vehicleTracker      VehicleTracker[]
  comunicationProblem ComunicationProblem[]
}

model ComunicationProblem {
  comunicationProblemId Int      @id @default(autoincrement())
  createdAt             DateTime @default(now())
  status                Status   @default(ACTIVE)

  vehicle   Vehicle @relation(fields: [vehicleId], references: [vehicleId], onDelete: Cascade)
  vehicleId Int

  comunicationDescription ComunicationDescription[]
}

model ComunicationDescription {
  comunicationDescriptionId Int      @id @default(autoincrement())
  date                      DateTime
  description               String   @db.VarChar(2000)

  user   User @relation(fields: [userId], references: [userId])
  userId Int

  comunicationProblem   ComunicationProblem @relation(fields: [comunicationProblemId], references: [comunicationProblemId], onDelete: Cascade)
  comunicationProblemId Int
}

model DriverIButton {
  driverIButtonId Int       @id @default(autoincrement())
  status          Status    @default(ACTIVE)
  startDate       DateTime  @default(now())
  endDate         DateTime? @db.Timestamp(0)
  comments        String    @db.VarChar(2000)

  driver   Driver @relation(fields: [driverId], references: [driverId])
  driverId Int

  ibutton   IButton @relation(fields: [ibuttonId], references: [ibuttonId])
  ibuttonId Int
}

model VehicleTracker {
  vehicleTrackerId Int       @id @default(autoincrement())
  status           Status    @default(ACTIVE)
  startDate        DateTime  @default(now())
  endDate          DateTime? @db.Timestamp(0)
  comments         String    @db.VarChar(2000)

  vehicle   Vehicle @relation(fields: [vehicleId], references: [vehicleId])
  vehicleId Int

  tracker   Tracker @relation(fields: [trackerId], references: [trackerId])
  trackerId Int
}

model Programming {
  programmingId Int      @id @default(autoincrement())
  text          String   @db.LongText
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Declaration {
  declarationId Int      @id @default(autoincrement())
  title         String
  url           String   @db.VarChar(255)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model AccessLink {
  accessLinkId Int      @id @default(autoincrement())
  title        String
  login        String
  password     String
  link         String   @db.VarChar(255)
  createdAt    DateTime @default(now())
}

enum Status {
  ACTIVE
  INACTIVE
}

enum UserType {
  USER
  ADMIN
}
